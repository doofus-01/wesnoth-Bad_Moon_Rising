# this is loaded directly in the [campaign] toplevel [event]
# #textdomain wesnoth-Bad_Moon_Rising

# the goal is to not reset XP when leveled-up
# there is an [object] that makes unit.experience and unit.max_experience increase by the pre-advance experience
# remove any previous similar [object] object afterwards

[event]
    name=prestart
    priority=4 # this is a new feature (1.17.20+), so I'm not sure what a good value is
    [event]
        name=pre advance
        first_time_only=no
        [filter]
        [/filter]
        # id with a space causes issues
        # try underlying_id?
        [set_variable]
            name = xp_carry_$unit.x|_$unit.underlying_id|
            value = $unit.max_experience
        [/set_variable]
        [set_variable]
            name = xp_carry_$unit.x|_$unit.underlying_id|
            value = $unit.max_experience
        [/set_variable]
        # put this part in a second event in case advancement gets aborted somehow
        [event]
            name=post advance
            # first_time_only=no
            [filter]
            [/filter]
            [remove_object]
                id=$unit.id
                object_id=$unit.underlying_id|_xp_object
            [/remove_object]
            [object]
                [filter]
                    id=$unit.id
                [/filter]
                id=$unit.underlying_id|_xp_object
                take_only_once=no
                silent=yes
                [effect]
                    apply_to = experience
                    increase = $xp_carry_$unit.x|_$unit.underlying_id|
                [/effect]
                [effect]
                    apply_to = max_experience
                    increase = $xp_carry_$unit.x|_$unit.underlying_id|
                [/effect]
            [/object]
            [clear_variable]
                name = xp_carry_$unit.x|_$unit.underlying_id|
            [/clear_variable]
        [/event]
    [/event]
[/event]

# changes how XP are displayed
# also, a "power meter" to show how artificially hardened the AI units are
# #define BMR_XP_STATUS_PANEL
[event]
    name=preload
    first_time_only=no
    [lua]
        code=<<
            local _ = wesnoth.textdomain "wesnoth-Bad_Moon_Rising"
            local old_unit_hard = wesnoth.interface.game_display.unit_image
            function wesnoth.interface.game_display.unit_image()
                local u = wesnoth.interface.get_displayed_unit()
                if not u then return {} end
                local h = old_unit_hard()
		if u.variables.hardened then
                    --
                    local hp_index = u.variables.hardened
                    local dmg_index = u.variables.hardened_damage
                    local string_index = hp_index + dmg_index
                    --
                    hp_index = math.floor(7 * hp_index / 10)
                    dmg_index = math.floor(7 * dmg_index / 10)
                    hp_index = math.max(hp_index, 1)
                    dmg_index = math.max(dmg_index, 1)
                    
                    local the_hp_overlay = string.format("misc/frame/red.png~CROP(1,1,19,%d)", hp_index)
                    local the_dmg_overlay = string.format("misc/frame/blue.png~CROP(1,1,19,%d)", dmg_index)
                    --
                    local the_string = "Undisciplined"
                    if string_index < 24 and string_index >= 14 then
                        the_string = "Tyro"
                    elseif string_index < 42 and string_index >= 24 then
                        the_string = "Grunt"
                    elseif string_index < 60 and string_index >= 42 then
                        the_string = "Journeyman"
                    elseif string_index < 89 and string_index >= 60 then
                        the_string = "Veteran"
                    elseif string_index < 120 and string_index >= 89 then
                        the_string = "Battle-Hardened"
                    elseif string_index < 160 and string_index >= 120 then
                        the_string = "Warrior"
                    elseif string_index < 210 and string_index >= 160 then
                        the_string = "Elite Warrior"
                    elseif string_index >= 210 then
                        the_string = "Paramount"
                    end
                    --
                    local the_tooltip = string.format("%s: \n +%d%% HP \n +%d%% damage", the_string, u.variables.hardened, u.variables.hardened_damage)
                    -- local the_tooltip = string.format("Battle-hardened")
--                    local the_image = string.format("%s~TC(%d,magenta)~SCALE_INTO_SHARP(72,72)", u.__cfg.image, u.__cfg.side)
--                    the_image = string.format("%s".."~BLIT(misc/frame/frame.png)".."~BLIT(%s)".."~BLIT(%s)", the_image, the_hp_overlay, the_dmg_overlay)
                    local the_image = string.format("%s~TC(%d,magenta)~SCALE_INTO_SHARP(72,72)", u.__cfg.image, u.__cfg.side)
                    the_image = string.format("misc/frame/bkg.png~BLIT(%s,2,1)~BLIT(%s,51,1)~FL(vert)~BLIT(%s)~BLIT(misc/frame/frame.png)", the_hp_overlay, the_dmg_overlay, the_image)
                    table.insert(h, 1, { "element", {
                        image = the_image,
                        tooltip = the_tooltip
                    } })
                    table.remove(h,2)
                end                    
                return h
            end

        >>
    [/lua]
    [set_variable]
        name=bmr_xp_lua_tooltip
        value=fired
    [/set_variable]
[/event]
# #enddef

[event]
    # name=prestart
    name=preload # I think this is OK because we are just reading variables and writing to other variables, not changing states?
    first_time_only=no
    # use the stronger average of either the lvl3-lvl5 or the leader+loyals (but no dogs)
    # still possible to game
    [set_variable]
        name=player_xp_TMP
        value=0
    [/set_variable]
    [set_variable]
        name=player_xp
        value=0
    [/set_variable]
    [store_unit]
        [filter]
            # could just be side 1 in most cases
            # could there be more than one human-controlled side?
            [filter_side]
                controller=human
            [/filter_side]
            level=3,4,5
            [and] # count everyone, map and recall
                x,y=1-99,1-99
                [or]
                    x,y=recall,recall
                [/or]
            [/and]
        [/filter]
        kill=no
        variable=l3_l5_filter
    [/store_unit]
    [store_unit]
        [filter]
            [filter_side]
                controller=human
            [/filter_side]
            level = 2,3,4,5
            [and]
                upkeep = loyal
                [or]
                    canrecruit=yes
                [/or]
            [/and]
            [and] # count everyone, map and recall
                x,y=1-99,1-99
                [or]
                    x,y=recall,recall
                [/or]
            [/and]
            [not]
                race=ukiandog
            [/not]
        [/filter]
        kill=no
        variable=loyals_filter
    [/store_unit]
    [if]
        [variable]
            name=l3_l5_filter.length
            greater_than = 0
        [/variable]
        [then]
            [foreach]
                array=l3_l5_filter
                [do]
                    [set_variable]
                        name=player_xp_TMP
                        add=$this_item.experience
                    [/set_variable]
                [/do]
            [/foreach]
            [set_variable]
                name=player_xp_TMP
                formula=" floor( $player_xp_TMP| / $l3_l5_filter.length| )"
            [/set_variable]
        [/then]
        [else]
            [set_variable]
                name=player_xp_TMP
                value = 0
            [/set_variable]
        [/else]
    [/if]
    [if]
        [variable]
            name=loyals_filter.length
            greater_than = 0
        [/variable]
        [then]
            [foreach]
                array=loyals_filter
                [do]
                    [set_variable]
                        name=player_xp
                        add=$this_item.experience
                    [/set_variable]
                [/do]
            [/foreach]
            [set_variable]
                name=player_xp
                formula=" floor( $player_xp| / $loyals_filter.length| )"
            [/set_variable]
        [/then]
        [else]
            [set_variable]
                name=player_xp
                value = 0
            [/set_variable]
        [/else]
    [/if]
    [set_variable]
        name=player_xp
        max = $player_xp|, $player_xp_TMP|
    [/set_variable]
    {CLEAR_VARIABLE l3_l5_filter}
    {CLEAR_VARIABLE loyals_filter}
    {CLEAR_VARIABLE player_xp_TMP}

    # Progression value
    [get_global_variable]
        namespace=Bad_Moon_Rising
        from_global=XPS_BMR_progression
        to_local=BMR_progression
    [/get_global_variable]
    [if]
        [variable]
            name=BMR_progression
            greater_than = 0
        [/variable]
        [else]
            [set_variable]
                name=BMR_progression
                value = 0.001
            [/set_variable]
        [/else]
    [/if]
    # resistance parameter
    [get_global_variable]
        namespace=Bad_Moon_Rising
        from_global=XPS_aaa
        to_local=aaa
    [/get_global_variable]
    [if]
        [variable]
            name=aaa
            greater_than=0.01
        [/variable]
        [else]
            [set_variable]
               name = aaa
               {QUANTITY value (0.1) (0.2) (0.3)}
            [/set_variable]
        [/else]
    [/if]
    # HP parameter
    [get_global_variable]
        namespace=Bad_Moon_Rising
        from_global=XPS_bbb
        to_local=bbb
    [/get_global_variable]
    [if]
        [variable]
            name=bbb
            greater_than=0.01
        [/variable]
        [else]
            [set_variable]
                name = bbb
                {QUANTITY value (0.1) (0.35) (0.6)}
            [/set_variable]
        [/else]
    [/if]
    # damage parameter
    [get_global_variable]
        namespace=Bad_Moon_Rising
        from_global=XPS_ccc
        to_local=ccc
    [/get_global_variable]
    [if]
        [variable]
            name=ccc
            greater_than=0.01
        [/variable]
        [else]
            [set_variable]
                name = ccc
                {QUANTITY value (0.1) (0.23) (0.5)}
            [/set_variable]
        [/else]
    [/if]
[/event]

# For some reason, the player's units can get "hardened", though value is 0
# If I find the cause, I can remove this silly event
[event]
    name=side turn
    first_time_only=no
    [filter_side]
        controller=ai
    [/filter_side]
    [modify_unit]
        [filter]
            [filter_side]
                controller=human
            [/filter_side]
            [filter_wml]
                [variables]
                    glob_on_hardened=*
                [/variables]
            [/filter_wml]
        [/filter]
        [clear_variable]
            name=hardened
        [/clear_variable]
        [clear_variable]
            name=hardened_damage
        [/clear_variable]
    [/modify_unit]
[/event]

[event]
    # this event can fire before prestart, if the units are in a [side] tag
    # that's why we replaced the event above prestart -> preload
    name=unit placed
    id=enemy_ai_buff_place
    first_time_only=no
    [filter]
        [filter_side]
            controller=ai
            # this may not be necessary - what happens when an ai side changes teams?
            # and why should friendly ai be weaker?
            # [has_enemy]
            #    controller=human
            # [/has_enemy]
        [/filter_side]
        [not]
            [filter_wml]
                [variables]
                    glob_on_hardened=*
                [/variables]
            [/filter_wml]
        [/not]
    [/filter]
    [fire_event]
        name=enemy_ai_buff
        [primary_unit]
            id=$unit.id
        [/primary_unit]
    [/fire_event]
[/event]

[event]
    name=enemy_ai_buff
    first_time_only=no
    # ###############################################################################
    # The purpose here isn't to make the perfect counter, it is to just raise the baseline
    # av_xp = average(player_xp)/(24 - BMR_prog) where 24 was chosen for lvl3 kill xp
    # resistance -> add A*resistance*(av_xp)%
    # HP -> add B*HP*(av_xp)%
    # attack -> add C*damage*(av_xp)%
    # progression factor - this is used to change difficulty at set points in campaign
    [if]
        [variable]
            name=player_xp
            greater_than = 0
        [/variable]
        [else]
            [set_variable]
                name=player_xp
                value = 1
            [/set_variable]
        [/else]
    [/if]
    [set_variable]
        name=BMR_progression_TMP
        value = $BMR_progression
    [/set_variable]
    [set_variable]
        name=BMR_progression_TMP
        {QUANTITY multiply (0.1) (0.15) (0.2)}
    [/set_variable]
    [set_variable]
        name = xp_frac
        rand = "0.01, 0.1, 0.2, 0.3, 0.4, 0.45, 0.5, 0.6, 0.7, 0.8, 0.9, 0.99"
    [/set_variable]
    [set_variable]
        name = inc_total_xp
        formula= "floor( lerp( 0.75 * $player_xp|, 1.50 * $player_xp|, $xp_frac|))"
    [/set_variable]
    [set_variable]
        name=player_xp_TMP
        value = $inc_total_xp|
    [/set_variable]
#    [wml_message]
#         message="BMR_progression = $BMR_progression|"
#         logger=err
#    [/wml_message]
    [set_variable]
        name = player_xp_TMP
        formula = "( 1 * $player_xp_TMP| ) / ( 24 - $BMR_progression| )"
    [/set_variable]
#    [wml_message]
#         message="player_xp_TMP = $player_xp_TMP| and player_xp = $player_xp|"
#         logger=err
#    [/wml_message]
    # resistance parameter - for difficulty levels, base value should stay constant
    [set_variable]
        name = aaa_TMP
        value = $aaa
    [/set_variable]
    # [wml_message]
    #     message="aaa_TMP = $aaa_TMP| and BMR_progression_TMP = $BMR_progression_TMP|"
    #     logger=err
    # [/wml_message]
    [set_variable]
        name = aaa_TMP
        add = $BMR_progression_TMP
    [/set_variable]
    [set_variable]
        name = aaa_TMP
        multiply = 0.1
    [/set_variable]
    [set_variable]
        name = aaa_TMP
        max = $aaa_TMP|, 0.001
    [/set_variable]

    # HP parameter
    [set_variable]
        name = bbb_TMP
        value = $bbb
    [/set_variable]
    #        [wml_message]
    #            message="bbb_TMP = $bbb_TMP| and BMR_progression_TMP = $BMR_progression_TMP|"
    #            logger=err
    #        [/wml_message]
    [set_variable]
        name = bbb_TMP
        add = $BMR_progression_TMP
    [/set_variable]
    [set_variable]
        name = bbb_TMP
        max = $bbb_TMP|, 0.001
    [/set_variable]

    # damage parameter
    [set_variable]
        name = ccc_TMP
        value = $ccc
    [/set_variable]
    #        [wml_message]
    #            message="ccc_TMP = $ccc_TMP| and BMR_progression_TMP = $BMR_progression_TMP|"
    #            logger=err
    #        [/wml_message]
    [set_variable]
        name = ccc_TMP
        add = $BMR_progression_TMP
    [/set_variable]
    [set_variable]
        name = ccc_TMP
        max = $ccc_TMP|, 0.001
    [/set_variable]
    {CLEAR_VARIABLE BMR_progression_TMP}

    # set the resistances
    [set_variables]
        name=arr
        mode=replace
        [value]
            foo=blade
        [/value]
        [value]
            foo=impact
        [/value]
        [value]
            foo=pierce
        [/value]
        [value]
            foo=arcane
        [/value]
        [value]
            foo=cold
        [/value]
        [value]
            foo=fire
        [/value]
    [/set_variables]
    [foreach]
        array=arr
        [do]
            [set_variable]
                name=r_type
                value=$arr[$i].foo
            [/set_variable]
            [set_variable]
                name=u_r_type_TMP
                value=$unit.resistance.$r_type
            [/set_variable]
            # be sure to use floats (200.0) or else this will result in 0
            [set_variable]
                name = inc_resist.$r_type
                formula = "( (200.0 - $u_r_type_TMP|) / 500.0) * clamp( 180 - $u_r_type_TMP|, 20, 120)"
            [/set_variable]
            [set_variable]
                name = inc_resist.$r_type
                formula = "$aaa_TMP| * $player_xp_TMP| * $inc_resist.$r_type|"
            [/set_variable]
            {CLEAR_VARIABLE u_r_type_TMP}
        [/do]
    [/foreach]
    # the divisor may need adjustment, it is somewhat arbitrary
    [set_variable]
        name = inc_HP
        formula= "( $bbb_TMP| * $player_xp_TMP| * $unit.max_hitpoints| ) / 10 "
    [/set_variable]
    [set_variable]
        name = inc_damage
        formula= "( $ccc_TMP| * $player_xp_TMP| * 10 )"
    [/set_variable]
    [modify_unit]
        [filter]
            id=$unit.id
        [/filter]
        [object]
            silent=yes
            buff_id=formula_buff
            [effect]
                apply_to=resistance
                replace=no
                [resistance]
                    arcane=-$inc_resist.arcane|
                    blade=-$inc_resist.blade|
                    cold=-$inc_resist.cold|
                    fire=-$inc_resist.fire|
                    impact=-$inc_resist.impact|
                    pierce=-$inc_resist.pierce|
                [/resistance]
            [/effect]
            [effect]
                apply_to=hitpoints
                heal_full=yes
                increase_total=$inc_HP|%
            [/effect]
            [effect]
                apply_to=max_experience
                increase=$inc_total_xp|%
            [/effect]
            [effect]
                apply_to=experience
                increase=$inc_total_xp|%
            [/effect]
            [effect]
                apply_to=attack
                range=melee
                increase_damage=$inc_damage|%
            [/effect]
            [effect]
                apply_to=attack
                range=ranged
                increase_damage=$inc_damage|%
            [/effect]
        [/object]
        [set_variable]
            name=hardened
            value = $inc_HP
            # formula ="( $inc_HP| + ($player_xp_TMP| / 10 ) + $inc_damage| )"
        [/set_variable]
        [set_variable]
            name=hardened
            round=trunc
        [/set_variable]
        [set_variable]
            name=hardened_damage
            value = $inc_damage
        [/set_variable]
        [set_variable]
            name=hardened_damage
            round=trunc
        [/set_variable]
    [/modify_unit]
    #        [wml_message]
    #            message="inc_total_xp = $inc_total_xp| and inc_damage = $inc_damage|"
    #            logger=err
    #        [/wml_message]
    #        [wml_message]
    #            message="inc_HP = $inc_HP| and inc_resist.blade = $inc_resist.blade"
    #            logger=err
    #        [/wml_message]
    {CLEAR_VARIABLE player_xp_TMP}
    #    {CLEAR_VARIABLE player_xp}
    {CLEAR_VARIABLE aaa_TMP}
    {CLEAR_VARIABLE bbb_TMP}
    {CLEAR_VARIABLE ccc_TMP}
    {CLEAR_VARIABLE arr}
    {CLEAR_VARIABLE inc_resist}
    {CLEAR_VARIABLE inc_damage}
    {CLEAR_VARIABLE inc_HP}
    {CLEAR_VARIABLE inc_total_xp}
    {CLEAR_VARIABLE xp_frac}
[/event]
# #enddef
